07-16-2019
Get rid of all weird scenarios.
New scenarios:
	Cur Date: 07-16-2019
	
	In DB, 07-13 : 09-15: Currently Efctv
	Add:   07-13 : 09-15	(NO) *		Invalid efctv_dt
		   09-14 : 10-15	(NO)
		   09-15 : 10-15	(YES)      After this, if tried to input the same again, it should fail
		   09-16 : 10-15	(NO)
	
	In DB, 07-30 : 09-15: Future Efctv
	Add:   07-30 : 09-15    (NO)	*
	       07-17 : 07-30    (NO)	*
		   09-14 : 10-15	(NO)	*
		   09-15 : 10-15	(YES)	* After this, if tried to input the same again, it should fail
		   09-16 : 10-15	(NO)	*
	______________________________________________________________________________

	In DB, 07-13 : 09-15 Currently Efective	(YES, only xprtn_dt)
		   09-15 : 09-25 
		   
	A A A	07-20 : 07-25			Update...... A A A	only update efctv_dt>=cur date	
		
	A A A	07-25 : 07-30			

	A A A	07-30 : 08-15			Update.......A A A only update xprtn_dt anthing
	
	
	
	
	A A A	07-20 : 07-25			Update...... A B C	create....	(cross check for A B C)
		
	A A A	07-25 : 07-30			

	A A A	07-30 : 08-15			Update.......A A A only update xprtn_dt anthing

--------------------------------------------------------------------------
		OSOUpdate:		07-16-2019
		
		1. If osoToUpdate_efctv_date>curDate{
			Can update everything, What about the crtd_by and crtd_dt ???? Is it like a new record or updating an old?***Like update
			* Filter according to not yet effective oso
			If a new combo --> {
					Create a new record
					totally new one...like create does(id remains the same though)
				}
			If existing combo -->{
					1. If
				}
					You cannot delete a record, but what if... 07-15 : 07-20, 07-21 : 07-25, 07-26 :07-28
					If someone wants to update the middle one for future date, they cannot because duplicate
		}
		
		2. IF UpdatedObject_efctv_date<=curDate{
			Everything is the same, can only change the xprtn_dt
		}		
		
	
		
		SCENARIOS: current: 07/16/2019
		64 One exists: 07-13 : 07-17
		
		65 07-18 : 07-20	Can update the efctv_dt upto(on or after last xprtn_dt),
						and xprtn_dt upto(on or before) the next row efctv_dt.		
		66 07-23 : 07-25
		67 07-28 : 08-01	If this is the last row, Can update the efctv_dt upto(on or after last xprtn_dt) 
						but xprtn_dt=any(on or after efctv)(even null is fine)
		
		And ----------------------------
		Nothing exists that is currently effective
		
		07-18 : 07-20 	1.Can update the efctv_dt upto(after curDate),
						  and xprtn_dt upto(on or before) the next row efctv_dt.
						2.If this is the last row, Can update the efctv_dt upto(after curDate),
						  and xprtn_dt upto any(on or after efctv_dt)(even null is fine)
		07-23 : 07-25
		07-28 : 08-01
						3. I
						
						
	-------------------------------------------------------------------------------------------------------------------

		07-01 : 07-05
		
		
		
		07-10 :	07-15
		
		
		07-01 : 07-05 
		
		07-06 : 07-08
		
		07-10 : 07-15
		
		
		
		
		
		1. Take the list of all the same combo
		2. Sort according to the effective date, asc
		3. Compare the interval for currently active and future effective date entries
			, and if a new entry is effective between those days, Accept it.
			
			07-08 : 07-10
			
			
			07-10 : 07-20
									07-20 :	07-25
			07-25 : 07-26
			
			08-01 : 08-05	
				
		2 scenarios:
		1. If no currently effective order, future only
				Next effective: 07-10 : 07-20				07-06 : 07-10		07-15:07-25
				currently	  :	07-09 : 07-09				07-11 : 07-14
		check if valid or not
		2. If there is a currently active order
				
				
				Conditions to be duplicate:
				If anything overlaps more than one day
				
				
				07-06 : 07-10
				07-22 : 07-24
				08-01 : 08-02
				08-06 :	08-09
						07-12 : 07-23
						
						for no active:
						
						for future active:
						
						for active , and future active
						
						
						if not effective and new xprtn date < efctv date
						
						if exp date is null -> last loop, if(null) -> 
		
		-----------------------
		expiring today, can we create and expire today itself?
		In the middle, if tried to put null as expiration?
		
		
		
		
-----------------------------------------------------------------------------------------------------------------------
For valid entry between two records interval.
for example, 07-01 : 07-05 
		
			07-06 : 07-10	--> should be able to make this entry
		
			07-10 : 07-15
	1. Take the list of all the same combo
		2. Sort according to the effective date, asc
		3. Compare the interval for currently active and future effective date entries
			, and if a new entry is effective between those days, Accept it.
-------------------------------------------------------------------------------------------------------------------------------
1. If a combo of entered record(imid,subId,3rdparty) is active: 
		For same combo record entry:
				If effective_date for new record < expirationdate for active --> Duplicate entry*** 
				If effective_date for new record > expirationdate for active: Possible***
				If effective_date for new record = expirationdate for active:  Duplicate***
						If no more record for future date --> Create a record
						If entry exist, check for its effective_date & exp_date window and compare ??
		For any other combination --> Create a record
2. If the combo of entered record(imid,subId,3rdparty) is not active :
		For same combo record entry --> Create a record
		For any other combo --> Create a record

If not active, but a future active exist with null exp date...
What if one try to add record effective before that???

.after(), .before() , what if on same day????/


if (efctv_dt>=currentDate)
{
	if(xprtn_dt>currentDate){
		if(duplicate record) duplicate record message
	}
	else xprtn_dt wrong 
}
else efctv_dt wrong
--------------------------------------------------------------------------------------------------------------------------------
SN	firm_mp_id               order_type_cd				exp_date        effective_date
1 	 ABC						123						05/01/2019		05/01/2019
2   ABC						123						05/02/2019		05/08/2019
3 	 ABC						123						05/09/2019		05/15/2019
   
   
   Repository.findByid(newAtsOrder.getcompositekey())
   
   
   newAtsOrder(Postman POST) ABC123-05/25/2019
   
   ABC						123						05/20/2019		05/25/2019
   
   Suppose:
   list.filer()=Repository.findALl() 1,2,3,4
   
   newAtsOrder.getCompo.getImpid(), getCompo.getAts
   
   list=akfdaljfd; exp_date.after(new Date()){
		newats.save();
   }
   
   atsordert, mpid, effective_date
   
   05/01/2019 expired
   
   05/15/2019 Message=Already exisit
   
   null	(expirationdate)		Infinity.......  Already exist
   
   , exp_date(not a required field)
   
   
   mpid				atsordertype 					exp_date
   ABC					123							05/01/2019
      ABC					123							05/04/2019
	     ABC					123							05/08/2019
		    ABC					123							05/15/2019
   
   latest=last objecy
   new object.
   
   
   
   Table
   colum1     column2   colum3
		A3     A3		3
		A2      A2      2
		A1      A1      1
		
		
		
		
		AtsComposite....
		
		1 row............
		2 row............
		3 row............
		4 row............
		
		
		Database table
		4 row
		3 row
		2 row
		1 row
		
		
		
		atsordertype and mpid
		
		4 records		(effective_date)
		
		
		1				05/01	
		2				05/03
						
		3				05/15
		
		4				05/09
		
		
		
		friday       9
		monday      12
		
		
		trade date = 8(thursday)
		trade date = 9(friday)
		
		
		if latest.getexp_date NULL
			Cannot create.
			
		If newAtsOrder.getEffectivedate is AFTER latest.AtsOrder.exp_date
			Create
		 
		if latest.getexp_date AFTER new Date()
			
			
			
			Today: Tuesday(05/28/2019)
			
			05/27/2019(Monday) -memorial day
			
			trade date: (friday) 05/24/2019
			
			
			
			suppose			Today : 01/02/2019(tuesday)

			trade date : 01/01/2019 X (monday)
							12/31/2018 (sunday)
							12/30/2018 (satur)
							12/29/2018
							
						
								
								
						suppose today=01/02/2019
						01/01
			if (one_biz_day_prior == holiday)		
				one_biz_day_prior == one_biz_day_prior-1
			
			if(one_biz_day_prior==sunday)
				one_biz_day_prior==one_biz_day_prior-2
				
				calendar_1_biz_day_prior
				currentDate 01/02/2018
				
				need to find if one_day_prior is not holiday
				
				
				
				1. Check what day is today. 
					If tue,wed,thu,fri,satur,
						one_biz_day_prior=day-1
						if(one_biz_day_prior==Holiday)
							one_biz_day_prior=day-1
								if(one_biz_day_prior!=sunday)
									one_biz_day_prior=set;
								if(one_biz_day_prior==sunday)
									call if sunday method
					
					If sunday,
						one_biz_day_prior=day-2
							if(one_biz_day_prior==holiday)
								one_biz_day_prior=one_biz_day_prior-1
									if(one_biz_day_prior!=any other holiday)
										one_biz_day_prior=set;
					
					If monday,
						one_biz_day_prior==day-3
							if(one_biz_day_prior==holiday)
								one_biz_day_prior=one_biz_day_prior-1
									if(one_biz_day_prior!=any other holiday)
										one_biz_day_prior=set;
			
			
			
   
   
   if one_biz_day_prior==memorial day
	one_biz_day_prior=one_biz_day_prior-1
   
   if (memorial)
   
   else if (afdljda)

	else if(split holiday)
	
	one_biz_day_prior
  (m) 
  1    2    3    4    5    6    7
  8    9   10   11   12   13   14
  15  16    17  18    19   20    21
  22  23    24
   
   memorialDay= ../../..
   
   get the memorial date:
					LocalDate lastMonthInMonth
--------------------------------------------------------------------------------------------------------------------------------------------
atsOr,imid,effDate,desc,expDate,createTs,createUser,updateTs,updateUser

For future eff.....
	If(atsComposite == atsComposite from path variable)If they do not mess with the composite key:{
	(Its like already effective unless updateTs and updateUser has to be different)
		atsOr,imid,effDate,createTs,createUser    Already there
		desc,expDate	....from payload.... set existing(get from updated)
		updateTs,updateUser .....updateUser get from path variable, updateTs from new Date
		save existingAtsOrder
	}
	else{
		If they mess with the composite key: (its like new entry)
		atsOr,imid,effDate,desc,expDate (Payload)
		createTs,createUser.....create new
		updateTs,updateUser.....empty
		save updatedAtsOrderType....
	}
		
		
		
For already eff......	
		atsOr,imid,effDate,createTs,createUser    Already there
		desc,expDate		from payload.... set existing(get from updated)
		updateTs,updateUser   updateUser get from path variable, updateTs from new Date
		save existingAtsOrder
------------------------------------------------------------------------------------------------------------------------------------------
   one_biz_day_prior == 01/01/2019(Saturday) --> NO TRADE
			one_biz_day_prior= -1
   
   STOCKEXCHANGE(FRIDAY) --> NO Trade
   
   
  01/01/2019(WEEKDAY)						01/01/2019(WEEKEND)SATURDAY
	one_biz_day_prior = -1					12/31/2018 FRIDAY(NO TRADE) -1(thursday)
											01/01/2019(WEEKEND)SUNDAY
													MONDAY(NO TRADE)
   
   AWS --- TABLE.......EVERY YEAR...Holiday, 12/31/2018
   -----------------------------------------------------
   TEXAS - 3pm......ORDER create....Create time 4pm
   COLORADO - 2pm.....Oreder create.....4pm
   (OUR) MARYLAND - Eastern Time -suppose 4pm
   
   ---------------------------------------------------
   
   ***@@ 1. efctv_dt MM-dd-yyyy format, it has to be current date or future date, No past date
   ***@@ 2. order_type_cd 1-40 characters, any characters(convert to uppercase)
   ***@@ 3. firm_mp_id Fixed 7 characters, alpha numeric(Convert to uppercase)
   ***@@ 4. order_desc_tx 1-500 characters, alphanumeric + some special characters
   ***@@ 5. xprtn_dt MM-dd-yyyy, xprtn_dt always ON or AFTER efctv_dt
   ***@@ 6. Duplicate entry
   
   7. Timezone(daylight saving)
   
  