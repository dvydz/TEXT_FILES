(1)
package org.finra.fileupload;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.servlet.http.HttpServletRequest;

import org.apache.tomcat.util.http.fileupload.FileItemIterator;
import org.apache.tomcat.util.http.fileupload.FileItemStream;
import org.apache.tomcat.util.http.fileupload.FileUploadException;
import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload;
import org.apache.tomcat.util.http.fileupload.util.Streams;
import org.joda.time.DateTime;
import org.joda.time.Seconds;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

/**
 * Apache commons file upload method will be used
 */
@Controller
public class FileUploadController
{
    private AmazonClient amazonClient;

    @Autowired
    public FileUploadController(AmazonClient amazonClient)
    {
        this.amazonClient = amazonClient;
    }

    @PostMapping(value = "/upload")
    public String handleFileUpload(HttpServletRequest request)
    {
        DateTime start = new DateTime();
        DateTime end = new DateTime();
        boolean isFound = false;

        // Check that we have a file upload request
        boolean isMultipart = ServletFileUpload.isMultipartContent(request);

        if (isMultipart)
        {
            // Create a new file upload handler
            ServletFileUpload servletFileUpload = new ServletFileUpload();
            try
            {
                // Parse the request
                FileItemIterator fileItemIterator = servletFileUpload.getItemIterator(request);
                while (fileItemIterator.hasNext())
                {
                    FileItemStream item = fileItemIterator.next();
                    String name = item.getName();
                    InputStream inputStream = item.openStream();
                    if (!item.isFormField())
                    {
                        start = DateTime.now();
                        InputStream uploadedStream = item.openStream();
                        amazonClient.uploadToAmazon(item);
//                        OutputStream outputStream = new FileOutputStream("C:\\Users\\k28172\\eclipse-workspace\\fileUploadPoc\\uploads\\" + name);
//                        {
//                            IOUtils.copy(uploadedStream, outputStream);
//                            outputStream.close();
//                            inputStream.close();
//                        }
                    }
                    else
                    {
                        String formFieldValue = Streams.asString(inputStream);
                    }
                    isFound = true;
                }
                end = DateTime.now();
            }
            catch (IOException | FileUploadException ex)
            {
                ex.printStackTrace();
            }
        }
        else
        {
            return "unsucessful";
        }
        if (isFound)
        {
            request.setAttribute("timeTaken", Seconds.secondsBetween(start, end).getSeconds() % 60 + " seconds.");
            return "success";
        }
        else
        {
            return "unsuccessful";
        }
    }

    @RequestMapping("/uploader")
    public String uploaderPage(ModelAndView modelAndView)
    {
        return "uploader";
    }
}


------------------------------------------
package org.finra.fileupload;

import static com.sun.xml.internal.ws.spi.db.BindingContextFactory.LOGGER;

import java.io.IOException;
import java.io.InputStream;

import javax.annotation.PostConstruct;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.event.ProgressEvent;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.transfer.TransferManager;
import com.amazonaws.services.s3.transfer.TransferManagerBuilder;
import com.amazonaws.services.s3.transfer.Upload;
import org.apache.tomcat.util.http.fileupload.FileItemStream;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class AmazonClient
{
    private AmazonS3 s3Client;

    private ObjectMetadata metadata;

    @Value("${amazonProperties.endpointUrl}")
    private String endpointUrl;

    @Value("${amazonProperties.bucketName}")
    private String bucketName;

    @Value("${amazonProperties.accessKey}")
    private String accessKey;

    @Value("${amazonProperties.secretKey}")
    private String secretKey;

//    @PostConstruct
//    private void initializeAmazon()
//    {
//        AWSCredentials awsCredentials = new BasicAWSCredentials(this.accessKey, this.secretKey);
//        this.s3Client = AmazonS3ClientBuilder.standard().withCredentials(new AWSStaticCredentialsProvider(awsCredentials)).build();
//    }

    public boolean uploadToAmazon(FileItemStream item)
    {
        boolean result = false;
        try
        {
            //Setting s3Client with credentials
            BasicAWSCredentials credentials = new BasicAWSCredentials(this.accessKey, this.secretKey);
            AWSStaticCredentialsProvider awsStaticCredentialsProvider = new AWSStaticCredentialsProvider(credentials);
//            this.s3Client = AmazonS3ClientBuilder.standard()
//                .withRegion("us-east-1")
//                .withCredentials(awsStaticCredentialsProvider)
//                .build();

            this.s3Client = AmazonS3ClientBuilder.standard().build();


            //Configuring a transfer manager with s3 client
            TransferManager transferManager = TransferManagerBuilder.standard()
                .withS3Client(s3Client)
                .build();

            InputStream uploadedStream = item.openStream();

//            ObjectMetadata meta = s3Client.getObjectMetadata(bucketName, item.getName());

            ObjectMetadata metadata = new ObjectMetadata();
            //    metadata.setContentLength(item.getSize());
            metadata.setContentType(item.getContentType());

            String key = "CATDD/" + item.getName();

            Upload upload = transferManager.upload(bucketName, key, uploadedStream, metadata);

            //Registering a progress listener
            upload.addProgressListener((ProgressEvent progressEvent) -> {
                LOGGER.info("Progress: " + progressEvent);
            });

            result = true;

            try
            {
                upload.waitForCompletion();
            }
            catch (InterruptedException e)
            {
                LOGGER.warning("Failed to upload file: " + e.getLocalizedMessage());
            }

            transferManager.shutdownNow();
        }
        catch (AmazonServiceException | IOException ase)
        {
            ase.printStackTrace();
        }

        return result;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
(2)

package org.finra.fileupload;

import static com.sun.xml.internal.ws.spi.db.BindingContextFactory.LOGGER;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.event.ProgressEvent;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.transfer.TransferManager;
import com.amazonaws.services.s3.transfer.TransferManagerBuilder;
import com.amazonaws.services.s3.transfer.Upload;
import org.apache.commons.fileupload.FileItemStream;
import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class AmazonClient
{
    private AmazonS3 s3Client;

    private ObjectMetadata metadata;

    @Value("${amazonProperties.endpointUrl}")
    private String endpointUrl;

    @Value("${amazonProperties.bucketName}")
    private String bucketName;


    public boolean uploadToAmazon(FileItemStream item)
    {
        boolean result = false;
        try
        {
            this.s3Client = AmazonS3ClientBuilder.standard().build();

            //Configuring a transfer manager with s3 client
            TransferManager transferManager = TransferManagerBuilder.standard()
                .withS3Client(s3Client)
                .build();

            InputStream uploadedStream = item.openStream();

            ObjectMetadata metadata = new ObjectMetadata();

            //Read the contents into a byte array for 5mb
            byte[] bytes = IOUtils.toByteArray(uploadedStream);
            metadata.setContentLength(5242880);
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);

            metadata.setContentType(item.getContentType());

            String key = "CATDD/" + item.getName();

            Upload upload = transferManager.upload(bucketName, key, uploadedStream, metadata);

            //Registering a progress listener
            upload.addProgressListener((ProgressEvent progressEvent) -> {
                LOGGER.info("Progress: " + progressEvent);
            });

            try
            {
                upload.waitForCompletion();
                result = true;
            }
            catch (InterruptedException e)
            {
                LOGGER.warning("Failed to upload file: " + e.getLocalizedMessage());
            }

            transferManager.shutdownNow();
        }
        catch (AmazonServiceException | IOException ase)
        {
            ase.printStackTrace();
        }

        return result;
    }
}
------------------------------------------------------------------------------------

package org.finra.fileupload;

import java.io.IOException;
import java.io.InputStream;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.fileupload.FileItemIterator;

import org.apache.commons.fileupload.FileItemStream;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.joda.time.DateTime;
import org.joda.time.Minutes;
import org.joda.time.Seconds;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

/**
 * Apache commons file upload method will be used
 */
@Controller
public class FileUploadController
{
    private AmazonClient amazonClient;

    @Autowired
    public FileUploadController(AmazonClient amazonClient)
    {
        this.amazonClient = amazonClient;
    }

    @PostMapping(value = "/upload")
    public String handleFileUpload(HttpServletRequest request)
    {
        DateTime start = new DateTime();
        DateTime end = new DateTime();
        boolean isFound = false;

        // Check that we have a file upload request
        boolean isMultipart = ServletFileUpload.isMultipartContent(request);

        if (isMultipart)
        {
            // Create a new file upload handler
            ServletFileUpload servletFileUpload = new ServletFileUpload();
            try
            {
                // Parse the request
                FileItemIterator fileItemIterator = servletFileUpload.getItemIterator(request);
                start = DateTime.now();
                while (fileItemIterator.hasNext())
                {
                    FileItemStream item = fileItemIterator.next();
                    if (!item.isFormField())
                    {
                       isFound = amazonClient.uploadToAmazon(item);
                    }
                }
                end = DateTime.now();
            }
            catch (IOException | FileUploadException ex)
            {
                ex.printStackTrace();
            }
        }
        if (isFound)
        {
            request.setAttribute("timeTaken",
                Minutes.minutesBetween(start, end).getMinutes()+ " minutes " + Seconds.secondsBetween(start, end).getSeconds() % 60 + " seconds.");
            return "success";
        }
        else
        {
            return "unsuccessful";
        }
    }

    @RequestMapping("/uploader")
    public String uploaderPage(ModelAndView modelAndView)
    {
        return "uploader";
    }
}

